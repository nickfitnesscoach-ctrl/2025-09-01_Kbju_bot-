"""
–í–µ–± –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –±–æ—Ç–∞
"""

import os
import sys

from flask import Flask, flash, jsonify, redirect, render_template, request, url_for

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –º–æ–¥—É–ª—é
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.texts import TEXTS, load_texts, save_texts

app = Flask(__name__)
app.secret_key = 'fitness-bot-admin-secret-key-2024'  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á

# –ü—Ä–æ—Å—Ç–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é)
ADMIN_PASSWORD = "admin123"  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤"""
    load_texts()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã
    return render_template('index.html', texts=TEXTS)


@app.route('/edit/<path:text_key>')
def edit_text(text_key):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    load_texts()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –∫–ª—é—á—É
    keys = text_key.split('.')
    text_data = TEXTS
    
    for key in keys:
        if isinstance(text_data, dict) and key in text_data:
            text_data = text_data[key]
        else:
            flash(f'–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {text_key}', 'error')
            return redirect(url_for('index'))
    
    return render_template('edit_text.html', 
                         text_key=text_key, 
                         text_data=text_data)


@app.route('/save', methods=['POST'])
def save_text():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    password = request.form.get('password')
    if password != ADMIN_PASSWORD:
        flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!', 'error')
        return redirect(request.referrer)
    
    text_key = request.form.get('text_key')
    new_text = request.form.get('text_content')
    
    if not text_key or new_text is None:
        flash('–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∫–ª—é—á –∏–ª–∏ —Ç–µ–∫—Å—Ç', 'error')
        return redirect(url_for('index'))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    keys = text_key.split('.')
    text_data = TEXTS
    
    # –î–æ—Ö–æ–¥–∏–º –¥–æ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    for key in keys[:-1]:
        if isinstance(text_data, dict) and key in text_data:
            text_data = text_data[key]
        else:
            flash(f'–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {text_key}', 'error')
            return redirect(url_for('index'))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª—é—á
    last_key = keys[-1]
    if isinstance(text_data, dict):
        if isinstance(text_data.get(last_key), dict) and 'text' in text_data[last_key]:
            text_data[last_key]['text'] = new_text
        else:
            text_data[last_key] = new_text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        save_texts()
        flash('–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success')
    else:
        flash('–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö', 'error')
    
    return redirect(url_for('edit_text', text_key=text_key))


@app.route('/api/texts')
def api_texts():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ –≤ JSON"""
    load_texts()
    return jsonify(TEXTS)


@app.route('/api/reload')
def api_reload():
    """API –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤"""
    load_texts()
    return jsonify({"status": "success", "message": "–¢–µ–∫—Å—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã"})


def create_templates():
    """–°–æ–∑–¥–∞—Ç—å HTML —à–∞–±–ª–æ–Ω—ã"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('templates', exist_ok=True)
    
    # –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    base_template = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ç–µ–∫—Å—Ç–æ–≤ –±–æ—Ç–∞{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .text-preview {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 15px;
            white-space: pre-wrap;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.4;
        }
        .edit-btn {
            margin-left: 10px;
        }
        .navbar-brand {
            font-weight: bold;
        }
        .card {
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
        .btn-primary {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
        .btn-success {
            background-color: #198754;
            border-color: #198754;
        }
        .text-key {
            font-family: 'Courier New', monospace;
            background-color: #f1f3f4;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="{{ url_for('index') }}">
                ü§ñ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Fitness Bot
            </a>
            <span class="navbar-text text-white">
                üìù –†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            </span>
        </div>
    </nav>

    <div class="container mt-4">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else 'success' }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>'''
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    index_template = '''{% extends "base.html" %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1>üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏ –±–æ—Ç–∞</h1>
        <p class="text-muted">–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.</p>
        
        <div class="mb-3">
            <button class="btn btn-info" onclick="location.reload()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
            <button class="btn btn-secondary" onclick="togglePreview()">üëÅÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–≤—å—é</button>
        </div>
        
        <div class="alert alert-info">
            <strong>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –¢–µ–∫—Å—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É: 
            <code>&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;</code>, 
            <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code>,
            <code>&lt;code&gt;–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π&lt;/code&gt;</code>
            –∏ —ç–º–æ–¥–∑–∏ üéØüí™üìä
        </div>
    </div>
</div>

{% macro render_texts(texts, prefix='') %}
    {% for key, value in texts.items() %}
        {% if value is mapping %}
            {% if 'text' in value and 'title' in value %}
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">{{ value.title }}</h5>
                        <a href="{{ url_for('edit_text', text_key=(prefix + key)) }}" class="btn btn-primary btn-sm">
                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </a>
                    </div>
                    <div class="card-body">
                        <div class="text-preview preview-content">{{ value.text }}</div>
                        <small class="text-muted">–ö–ª—é—á: <span class="text-key">{{ prefix + key }}</span></small>
                    </div>
                </div>
            {% else %}
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">üìÅ {{ key.title().replace('_', ' ') }}</h5>
                    </div>
                    <div class="card-body">
                        {{ render_texts(value, prefix + key + '.') }}
                    </div>
                </div>
            {% endif %}
        {% else %}
            <div class="card">
                <div class="card-body d-flex justify-content-between align-items-start">
                    <div class="flex-grow-1 me-3">
                        <strong>{{ key.replace('_', ' ').title() }}:</strong>
                        <div class="text-preview preview-content mt-2">{{ value }}</div>
                        <small class="text-muted">–ö–ª—é—á: <span class="text-key">{{ prefix + key }}</span></small>
                    </div>
                    <a href="{{ url_for('edit_text', text_key=(prefix + key)) }}" class="btn btn-primary btn-sm">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </a>
                </div>
            </div>
        {% endif %}
    {% endfor %}
{% endmacro %}

{{ render_texts(texts) }}

<script>
let showPreview = true;

function togglePreview() {
    showPreview = !showPreview;
    const previews = document.querySelectorAll('.preview-content');
    previews.forEach(preview => {
        preview.style.display = showPreview ? 'block' : 'none';
    });
    
    const btn = event.target;
    btn.textContent = showPreview ? 'üëÅÔ∏è –°–∫—Ä—ã—Ç—å –ø—Ä–µ–≤—å—é' : 'üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é';
}
</script>
{% endblock %}'''
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_template = '''{% extends "base.html" %}

{% block title %}–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="{{ url_for('index') }}">–ì–ª–∞–≤–Ω–∞—è</a></li>
                <li class="breadcrumb-item active">{{ text_key }}</li>
            </ol>
        </nav>
        
        <h1>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</h1>
        <p class="text-muted">–ö–ª—é—á: <span class="text-key">{{ text_key }}</span></p>
    </div>
</div>

<div class="row">
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h5>
            </div>
            <div class="card-body">
                <form method="POST" action="{{ url_for('save_text') }}">
                    <input type="hidden" name="text_key" value="{{ text_key }}">
                    
                    <div class="mb-3">
                        <label for="text_content" class="form-label">–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</label>
                        <textarea 
                            class="form-control" 
                            id="text_content" 
                            name="text_content" 
                            rows="12" 
                            required
                            style="font-family: 'Segoe UI', sans-serif; line-height: 1.4;"
                        >{{ text_data.text if text_data is mapping and 'text' in text_data else text_data }}</textarea>
                        <div class="form-text">
                            –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞: &lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;, &lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;, &lt;code&gt;–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π&lt;/code&gt;
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="password" class="form-label">–ü–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:</label>
                        <input type="password" class="form-control" id="password" name="password" required 
                               placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏">
                    </div>
                    
                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <a href="{{ url_for('index') }}" class="btn btn-secondary">–û—Ç–º–µ–Ω–∞</a>
                        <button type="submit" class="btn btn-success">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</h5>
            </div>
            <div class="card-body">
                <div class="text-preview" id="preview">
                    {{ text_data.text if text_data is mapping and 'text' in text_data else text_data }}
                </div>
                
                <div class="mt-3">
                    <h6>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:</h6>
                    <ul class="small">
                        <li><code>&lt;b&gt;—Ç–µ–∫—Å—Ç&lt;/b&gt;</code> - –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</li>
                        <li><code>&lt;i&gt;—Ç–µ–∫—Å—Ç&lt;/i&gt;</code> - –∫—É—Ä—Å–∏–≤</li>
                        <li><code>&lt;code&gt;—Ç–µ–∫—Å—Ç&lt;/code&gt;</code> - –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç</li>
                        <li><code>{–ø–∞—Ä–∞–º–µ—Ç—Ä}</code> - –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π</li>
                        <li>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —ç–º–æ–¥–∑–∏ üéØüí™üìä</li>
                        <li><code>\\n</code> - –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
document.getElementById('text_content').addEventListener('input', function() {
    const preview = document.getElementById('preview');
    let text = this.value;
    
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ HTML —Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    text = text.replace(/<b>(.*?)<\\/b>/g, '<strong>$1</strong>');
    text = text.replace(/<i>(.*?)<\\/i>/g, '<em>$1</em>');
    text = text.replace(/<code>(.*?)<\\/code>/g, '<code>$1</code>');
    text = text.replace(/\\n/g, '<br>');
    
    preview.innerHTML = text;
});
</script>
{% endblock %}'''
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–æ–≤
    with open('templates/base.html', 'w', encoding='utf-8') as f:
        f.write(base_template)
    
    with open('templates/index.html', 'w', encoding='utf-8') as f:
        f.write(index_template)
    
    with open('templates/edit_text.html', 'w', encoding='utf-8') as f:
        f.write(edit_template)


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
    create_templates()
    
    print("üöÄ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞!")
    print("üìù –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000 –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤")
    print(f"üîë –ü–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {ADMIN_PASSWORD}")
    print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:5000")
    print("2. –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'")
    print("3. –ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    print("4. –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –≤ –±–æ—Ç–µ!")
    
    app.run(debug=True, host='localhost', port=5000)