# app/admin.py
from __future__ import annotations

import logging
from typing import Optional, List

from aiogram import Router, F
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ForceReply,
)
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramNetworkError

from app.database.requests import get_hot_leads
from app.contact_requests import contact_request_registry
from app.states import AdminStates
from app.texts import get_text, get_button_text, set_media_id
from app.calculator import get_goal_description, get_activity_description
from config import ADMIN_CHAT_ID
from utils.notifications import CONTACT_REQUEST_MESSAGE

# ----------------------------
# Router
# ----------------------------
admin = Router()

logger = logging.getLogger(__name__)

_missing_admin_id_logged = False


def _is_authorized_admin(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–æ–º."""
    global _missing_admin_id_logged

    if ADMIN_CHAT_ID is None:
        if not _missing_admin_id_logged:
            logger.warning("ADMIN_CHAT_ID is not configured; admin media handlers disabled")
            _missing_admin_id_logged = True
        return False

    if not message.from_user or message.from_user.id != ADMIN_CHAT_ID:
        return False

    if message.chat.type != "private" or message.chat.id != ADMIN_CHAT_ID:
        return False

    return True


logger = logging.getLogger(__name__)


# ----------------------------
# Admin filter
# ----------------------------
class Admin(Filter):
    """–ü—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Å–ø–∏—Å–∫—É ID."""

    def __init__(self, admin_ids: Optional[List[int]] = None):
        # –ó–∞–¥–∞–π —Å–≤–æ–π ID –∑–¥–µ—Å—å –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–π –∏–∑–≤–Ω–µ.
        self.admins = admin_ids or [ADMIN_CHAT_ID]
        if admin_ids is not None:
            self.admins = admin_ids
        else:
            self.admins = []
            if ADMIN_CHAT_ID is not None:
                self.admins.append(ADMIN_CHAT_ID)

    async def __call__(self, message: Message) -> bool:
        user_id = message.from_user.id if message.from_user else None
        return bool(user_id and user_id in self.admins)


# ----------------------------
# Helpers (formatting)
# ----------------------------
def _fmt(v, suffix: str = "") -> str:
    """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –¥–µ—Ñ–æ–ª—Ç–æ–º."""
    if v is None or v == "":
        return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    return f"{v}{suffix}" if suffix else f"{v}"


def _username_link(username: Optional[str]) -> str:
    """HTML-—Å—Å—ã–ª–∫–∞ –Ω–∞ username (–∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞)."""
    if not username:
        return "–Ω–µ—Ç username"
    return f'<a href="https://t.me/{username}">@{username}</a>'


def _priority_label(code: Optional[str]) -> str:
    """–ü–æ–¥–ø–∏—Å—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ JSON –∫–Ω–æ–ø–æ–∫ (priority_nutrition/training/schedule)."""
    if not code:
        return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    return get_button_text(f"priority_{code}")


def _priority_icon(score: int) -> str:
    """–í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."""
    if score >= 100:
        return "üéÜ"
    if score >= 80:
        return "üî•"
    return "üü†"


# ----------------------------
# Keyboard builder
# ----------------------------
def _lead_keyboard(current_idx: int, total_count: int, user_tg_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–∏–¥–∞ (–ø–æ–¥–ø–∏—Å–∏ –∏–∑ JSON)."""
    rows: list[list[InlineKeyboardButton]] = []

    # 1) –ù–∞–ø–∏—Å–∞—Ç—å –ª–∏–¥—É
    rows.append([
        InlineKeyboardButton(
            text=get_button_text("write_lead"),
            url=f"tg://user?id={user_tg_id}",
        )
    ])

    # 2) –ù–∞–≤–∏–≥–∞—Ü–∏—è (prev / next)
    nav_row: list[InlineKeyboardButton] = []
    if current_idx > 0:
        nav_row.append(
            InlineKeyboardButton(
                text=get_button_text("nav_prev"),
                callback_data=f"lead_prev_{current_idx}",
            )
        )
    if current_idx < total_count - 1:
        nav_row.append(
            InlineKeyboardButton(
                text=get_button_text("nav_next"),
                callback_data=f"lead_next_{current_idx}",
            )
        )
    if nav_row:
        rows.append(nav_row)

    # 3) –°—á—ë—Ç—á–∏–∫
    counter = get_text("admin.counter", current=current_idx + 1, total=total_count)
    rows.append([InlineKeyboardButton(text=counter, callback_data="noop")])

    # 4) –ù–∞–∑–∞–¥ (–≤ ¬´–∞–¥–º–∏–Ω-–º–µ–Ω—é¬ª)
    rows.append([InlineKeyboardButton(text=get_button_text("back"), callback_data="admin_menu")])

    return InlineKeyboardMarkup(inline_keyboard=rows)


# ----------------------------
# Admin menu text
# ----------------------------
def _admin_menu_text() -> str:
    """–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –ø–µ—Ä–µ—á–Ω–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""

    base = get_text("admin.welcome")
    commands: list[tuple[str, str]] = [
        ("/admin", "–ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫—É"),
        ("/leads", "—Å–ø–∏—Å–æ–∫ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤"),
        ("/set_coach_photo", "–ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"),
        ("/photo_id", "–ø–æ–∫–∞–∑–∞—Ç—å file_id —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è-—Ä–µ–ø–ª–∞—è"),
    ]

    lines = [base, "", "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"]
    lines.extend(f"{command} ‚Äî {description}" for command, description in commands)
    return "\n".join(lines)


# ----------------------------
# Card renderer
# ----------------------------
async def _show_lead_card(
    target: Message | CallbackQuery,
    state: FSMContext,
    leads_list,
    index: int,
) -> None:
    """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ª–∏–¥–∞ (–ø–æ —à–∞–±–ª–æ–Ω—É –∏–∑ JSON)."""
    if index < 0 or index >= len(leads_list):
        return

    lead = leads_list[index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await state.update_data(leads_list=leads_list, current_index=index, reply_target_id=None)
    await state.set_state(AdminStates.viewing_leads)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª–µ–π
    pr_icon = _priority_icon(lead.priority_score or 0)
    gender_text = "üë® –ú—É–∂—Å–∫–æ–π" if lead.gender == "male" else "üë© –ñ–µ–Ω—Å–∫–∏–π"
    goal_text = get_goal_description(lead.goal or "maintenance")
    activity_text = get_activity_description(lead.activity or "moderate")

    card_text = get_text(
        "admin.lead_card",
        # –®–∞–ø–∫–∞
        priority_icon=pr_icon,
        index=index + 1,
        first_name=lead.first_name or "‚Äî",
        tg_id=lead.tg_id,
        username_link=_username_link(lead.username),
        priority_score=lead.priority_score or 0,
        funnel_status=lead.funnel_status or "‚Äî",
        # –ö–ë–ñ–£ –±–ª–æ–∫
        gender_text=gender_text,
        age_text=_fmt(lead.age, " –ª–µ—Ç"),
        height_text=_fmt(lead.height, " —Å–º"),
        weight_text=_fmt(lead.weight, " –∫–≥"),
        activity_text=activity_text,
        goal_text=goal_text,
        calories_text=_fmt(lead.calories, " –∫–∫–∞–ª"),
        # –ù–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
        priority_label=_priority_label(getattr(lead, "priority", None)),
        updated_at=(lead.updated_at.strftime("%d.%m %H:%M") if getattr(lead, "updated_at", None) else "‚Äî"),
    )

    kb = _lead_keyboard(index, len(leads_list), lead.tg_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if isinstance(target, CallbackQuery) and target.message:
        await target.message.edit_text(card_text, reply_markup=kb, parse_mode="HTML")
    else:
        assert isinstance(target, Message)
        await target.answer(card_text, reply_markup=kb, parse_mode="HTML")


# ----------------------------
# Handlers
# ----------------------------
@admin.message(Admin(), Command("admin"))
async def admin_home(message: Message) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    await message.answer(_admin_menu_text(), parse_mode="HTML")


@admin.message(Admin(), Command("leads"))
async def admin_leads(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥—ã (—Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º 1-—é –∫–∞—Ä—Ç–æ—á–∫—É)."""
    leads = await get_hot_leads()
    if not leads:
        await message.answer(get_text("admin.no_hot_leads"), parse_mode="HTML")
        return
    await _show_lead_card(message, state, leads, 0)


@admin.callback_query(F.data.startswith("lead_next_"))
async def admin_next_lead(callback: CallbackQuery, state: FSMContext) -> None:
    """–°–ª–µ–¥—É—é—â–∏–π –ª–∏–¥."""
    data = await state.get_data()
    leads = data.get("leads_list", [])
    idx = data.get("current_index", 0)
    next_idx = min(idx + 1, max(len(leads) - 1, 0))
    if leads:
        await _show_lead_card(callback, state, leads, next_idx)
    await callback.answer()


@admin.callback_query(F.data.startswith("lead_prev_"))
async def admin_prev_lead(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ª–∏–¥."""
    data = await state.get_data()
    leads = data.get("leads_list", [])
    idx = data.get("current_index", 0)
    prev_idx = max(idx - 1, 0)
    if leads:
        await _show_lead_card(callback, state, leads, prev_idx)
    await callback.answer()


@admin.callback_query(F.data.startswith("lead_contact:"))
async def admin_contact_lead(callback: CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏–¥—É —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞."""
    admin_id = callback.from_user.id if callback.from_user else None
    logger.info("Admin %s pressed lead_contact button with data %s", admin_id, callback.data)

    if admin_id != ADMIN_CHAT_ID:
        logger.warning("Unauthorized lead_contact button press from %s", admin_id)
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        _, tg_id_str = callback.data.split(":", 1)
        lead_id = int(tg_id_str)
    except (AttributeError, ValueError):
        logger.warning("Invalid lead_contact payload: %s", callback.data)
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    bot = callback.message.bot if callback.message else None
    if bot is None:
        logger.error("Cannot access bot instance to contact lead %s", lead_id)
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
        return

    try:
        await bot.send_message(
            chat_id=lead_id,
            text=CONTACT_REQUEST_MESSAGE,
            reply_markup=ForceReply(input_field_placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"),
        )
    except TelegramForbiddenError as exc:
        logger.warning("Lead %s blocked bot while sending contact prompt: %s", lead_id, exc)
        await callback.answer("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –ª–∏–¥—É", show_alert=True)
        return
    except (TelegramBadRequest, TelegramNetworkError) as exc:
        logger.error("Failed to deliver contact prompt to lead %s: %s", lead_id, exc)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", show_alert=True)
        return
    except Exception as exc:  # noqa: BLE001
        logger.exception("Unexpected error while sending contact prompt to %s: %s", lead_id, exc)
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
        return

    logger.info("Contact prompt delivered to lead %s", lead_id)
    await contact_request_registry.add(lead_id)
    await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


async def _restore_reply_state(state: FSMContext) -> None:
    """–í–µ—Ä–Ω—É—Ç—å FSM –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏–¥–æ–≤ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞."""

    data = await state.get_data()
    leads_list = data.get("leads_list")
    current_index = data.get("current_index")

    if leads_list is not None and current_index is not None:
        await state.set_state(AdminStates.viewing_leads)
        await state.update_data(reply_target_id=None)
    else:
        await state.clear()


@admin.callback_query(F.data.startswith("lead_reply:"))
async def admin_reply_lead(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ª–∏–¥—É –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞."""

    admin_id = callback.from_user.id if callback.from_user else None
    logger.info("Admin %s pressed lead_reply button with data %s", admin_id, callback.data)

    if admin_id != ADMIN_CHAT_ID:
        logger.warning("Unauthorized lead_reply button press from %s", admin_id)
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        _, tg_id_str = callback.data.split(":", 1)
        lead_id = int(tg_id_str)
    except (AttributeError, ValueError):
        logger.warning("Invalid lead_reply payload: %s", callback.data)
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    await state.update_data(reply_target_id=lead_id)
    await state.set_state(AdminStates.lead_reply)

    prompt = (
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /cancel –∏–ª–∏ —Å–ª–æ–≤–æ '–æ—Ç–º–µ–Ω–∞' ‚Äî —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å."
    )
    if callback.message:
        await callback.message.answer(prompt)

    await callback.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")


@admin.message(Admin(), AdminStates.lead_reply)
async def admin_send_lead_reply(message: Message, state: FSMContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ª–∏–¥—É –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞."""

    data = await state.get_data()
    lead_id = data.get("reply_target_id")

    if message.text and message.text.lower().strip() in {"/cancel", "–æ—Ç–º–µ–Ω–∞"}:
        await _restore_reply_state(state)
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    if not lead_id:
        logger.warning("Lead reply requested without target in state")
        await message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω –ª–∏–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()
        return

    logger.info("Admin %s is sending reply to lead %s", message.from_user.id if message.from_user else None, lead_id)

    try:
        await message.send_copy(chat_id=lead_id)
    except TypeError:
        if message.text:
            try:
                await message.bot.send_message(chat_id=lead_id, text=message.text)
            except TelegramForbiddenError as exc:
                logger.warning("Lead %s blocked bot during reply: %s", lead_id, exc)
                await message.answer("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                await _restore_reply_state(state)
                return
            except (TelegramBadRequest, TelegramNetworkError) as exc:
                logger.error("Failed to send text reply to lead %s: %s", lead_id, exc)
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
            except Exception as exc:  # noqa: BLE001
                logger.exception("Unexpected error while sending text reply to %s: %s", lead_id, exc)
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")
                return
        else:
            await message.answer("–≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
    except TelegramForbiddenError as exc:
        logger.warning("Lead %s blocked bot during reply: %s", lead_id, exc)
        await message.answer("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await _restore_reply_state(state)
        return
    except (TelegramBadRequest, TelegramNetworkError) as exc:
        logger.error("Failed to deliver reply to lead %s: %s", lead_id, exc)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    except Exception as exc:  # noqa: BLE001
        logger.exception("Unexpected error while sending reply to %s: %s", lead_id, exc)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.")
        return

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    await _restore_reply_state(state)


@admin.callback_query(F.data == "admin_menu")
async def admin_back(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ ¬´–∞–¥–º–∏–Ω-–º–µ–Ω—é¬ª (–ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)."""
    await state.clear()
    await callback.message.edit_text(_admin_menu_text(), parse_mode="HTML")
    await callback.answer()


# ----------------------------
# Media helpers
# ----------------------------


@admin.message(Command("set_coach_photo"))
async def admin_set_coach_photo(message: Message) -> None:
    """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ."""
    if not _is_authorized_admin(message):
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")


@admin.message(Command("photo_id"))
async def admin_photo_id(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å file_id —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è-—Ä–µ–ø–ª–∞—è."""
    if not _is_authorized_admin(message):
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    reply = message.reply_to_message
    if not reply or not reply.photo:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ")
        return

    await message.answer(f"file_id: {reply.photo[-1].file_id}")


@admin.message(F.photo)
async def admin_receive_photo(message: Message) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å file_id –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    if not _is_authorized_admin(message):
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    largest_photo = message.photo[-1]
    file_id = largest_photo.file_id

    await message.answer(f"file_id: {file_id}")

    try:
        set_media_id("coach_photo_file_id", file_id)
        logger.debug("coach_photo_file_id saved via admin photo message")
    except Exception as exc:
        logger.error("Failed to save coach photo file_id: %s", exc)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å file_id, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
