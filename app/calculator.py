"""
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ö–ë–ñ–£ –¥–ª—è Fitness Bot
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞
"""


class KBJUCalculator:
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    ACTIVITY_COEFFICIENTS = {
        'low': 1.2,        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–æ—Ñ–∏—Å)
        'moderate': 1.375,  # –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é
        'high': 1.55,      # –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
        'very_high': 1.725  # –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
    }
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ü–µ–ª—è–º
    GOAL_ADJUSTMENTS = {
        'weight_loss': -0.15,    # -15% –æ—Ç –Ω–æ—Ä–º—ã
        'maintenance': 0,        # –Ω–æ—Ä–º–∞
        'weight_gain': +0.10     # +10% –æ—Ç –Ω–æ—Ä–º—ã
    }
    
    @staticmethod
    def calculate_bmr(gender: str, age: int, weight: float, height: int) -> float:
        """
        –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
        
        Args:
            gender: 'male' –∏–ª–∏ 'female'
            age: –≤–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö
            weight: –≤–µ—Å –≤ –∫–≥
            height: —Ä–æ—Å—Ç –≤ —Å–º
            
        Returns:
            float: –±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º –≤ –∫–∫–∞–ª/–¥–µ–Ω—å
        """
        if gender == 'male':
            return 10 * weight + 6.25 * height - 5 * age + 5
        else:
            return 10 * weight + 6.25 * height - 5 * age - 161
    
    @classmethod
    def calculate_kbju(cls, gender: str, age: int, weight: float, height: int, 
                       activity: str, goal: str) -> dict:
        """
        –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏
        
        Args:
            gender: 'male' –∏–ª–∏ 'female'
            age: –≤–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö
            weight: –≤–µ—Å –≤ –∫–≥
            height: —Ä–æ—Å—Ç –≤ —Å–º
            activity: 'low', 'moderate', 'high', 'very_high'
            goal: 'weight_loss', 'maintenance', 'weight_gain'
            
        Returns:
            dict: —Å–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –ö–ë–ñ–£
        """
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if gender not in ['male', 'female']:
            raise ValueError("Gender must be 'male' or 'female'")
        
        if activity not in cls.ACTIVITY_COEFFICIENTS:
            raise ValueError(f"Activity must be one of {list(cls.ACTIVITY_COEFFICIENTS.keys())}")
            
        if goal not in cls.GOAL_ADJUSTMENTS:
            raise ValueError(f"Goal must be one of {list(cls.GOAL_ADJUSTMENTS.keys())}")
        
        # –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º
        bmr = cls.calculate_bmr(gender, age, weight, height)
        
        # –° —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        calories_maintenance = bmr * cls.ACTIVITY_COEFFICIENTS[activity]
        
        # –° —É—á–µ—Ç–æ–º —Ü–µ–ª–∏
        calories_target = calories_maintenance * (1 + cls.GOAL_ADJUSTMENTS[goal])
        
        # –†–∞—Å—á–µ—Ç –ë–ñ–£ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏)
        proteins = round(weight * 2.2)  # 2.2–≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞
        fats = round(calories_target * 0.25 / 9)  # 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
        carbs = round((calories_target - proteins*4 - fats*9) / 4)  # –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        
        return {
            'calories': round(calories_target),
            'proteins': proteins,
            'fats': fats,
            'carbs': carbs,
            'bmr': round(bmr)  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
    
    @staticmethod
    def validate_user_data(gender: str, age: int, weight: float, height: int) -> tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            tuple: (is_valid, error_message)
        """
        
        if gender not in ['male', 'female']:
            return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª"
        
        if not (15 <= age <= 80):
            return False, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 15 –¥–æ 80 –ª–µ—Ç"
            
        if not (30 <= weight <= 200):
            return False, "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 200 –∫–≥"
            
        if not (140 <= height <= 220):
            return False, "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 140 –¥–æ 220 —Å–º"
        
        return True, ""


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è

def get_activity_description(activity: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    descriptions = {
        'low': 'üõãÔ∏è –ù–∏–∑–∫–∞—è (–æ—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞)',
        'moderate': 'üö∂ –£–º–µ—Ä–µ–Ω–Ω–∞—è (1-3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)',
        'high': 'üèÉ –í—ã—Å–æ–∫–∞—è (3-5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)',
        'very_high': 'üí™ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (6-7 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)'
    }
    return descriptions.get(activity, activity)


def get_goal_description(goal: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏"""
    descriptions = {
        'weight_loss': 'üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ',
        'maintenance': '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞',
        'weight_gain': 'üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã'
    }
    return descriptions.get(goal, goal)