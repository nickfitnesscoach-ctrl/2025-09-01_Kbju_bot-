"""
–û—Å–Ω–æ–≤–Ω–æ–π flow –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Fitness Bot
–í–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è -> –ö–ë–ñ–£ -> –≤–æ—Ä–æ–Ω–∫–∞ –ª–∏–¥–æ–≤ -> webhook
"""

import asyncio
import html
import logging
from datetime import datetime
from functools import wraps
from typing import Any

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError, TelegramRetryAfter
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.calculator import KBJUCalculator, get_activity_description, get_goal_description
from app.database.requests import get_user, set_user, update_user_data, update_user_status
from app.keyboards import *
from app.states import KBJUStates
from app.texts import get_text
from app.webhook import TimerService, WebhookService
from config import CHANNEL_URL

logger = logging.getLogger(__name__)

# Rate limiting storage
user_requests = {}
USER_REQUESTS_LIMIT = 30
USER_REQUESTS_WINDOW = 60  # seconds

user = Router()


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def rate_limit(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback –∏–ª–∏ message
        user_id = None
        if args and hasattr(args[0], 'from_user') and args[0].from_user:
            user_id = args[0].from_user.id
        
        if user_id:
            now = datetime.utcnow().timestamp()
            if user_id not in user_requests:
                user_requests[user_id] = []
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            user_requests[user_id] = [
                req_time for req_time in user_requests[user_id] 
                if now - req_time < USER_REQUESTS_WINDOW
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(user_requests[user_id]) >= USER_REQUESTS_LIMIT:
                logger.warning(f"Rate limit exceeded for user {user_id}")
                return
            
            user_requests[user_id].append(now)
        
        return await func(*args, **kwargs)
    return wrapper


def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except TelegramBadRequest as e:
            logger.error(f"Telegram error in {func.__name__}: {e}")
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified" - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            if "message is not modified" in str(e):
                # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if args and hasattr(args[0], 'answer'):
                    try:
                        await args[0].answer()
                    except (TelegramBadRequest, TelegramNetworkError) as e:
                        logger.warning("Send answer failed: %s", e)
                return
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if args and hasattr(args[0], 'message'):
                try:
                    await args[0].message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=back_to_menu()
                    )
                except Exception as e:
                    logger.exception("Unhandled UI error: %s", e)
        except TelegramRetryAfter as e:
            logger.warning(f"Rate limited by Telegram: {e}")
            await asyncio.sleep(e.retry_after)
        except Exception as e:
            logger.error(f"Unexpected error in {func.__name__}: {e}")
            if args and hasattr(args[0], 'message'):
                try:
                    await args[0].message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=back_to_menu()
                    )
                except Exception as e:
                    logger.exception("Unhandled UI error: %s", e)
    return wrapper


def validate_user_data(data: dict[str, Any]) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not data:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    age = data.get('age')
    if not age or not (15 <= age <= 80):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å
    weight = data.get('weight')
    if not weight or not (30 <= weight <= 200):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Ç
    height = data.get('height')
    if not height or not (140 <= height <= 220):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ['gender', 'activity', 'goal']
    for field in required_fields:
        if field not in data or not data[field]:
            return False
    
    return True


def sanitize_text(text: str, max_length: int = 100) -> str:
    """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    if not text:
        return ""
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
    text = html.escape(str(text))
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(text) > max_length:
        text = text[:max_length] + "..."
    
    return text


async def send_delayed_offer(user_id: int, chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º"""
    from aiogram import Bot

    from config import TOKEN
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(3)
    
    try:
        bot = Bot(token=TOKEN)
        
        offer_text = get_text("delayed_offer")
        
        await bot.send_message(
            chat_id=chat_id,
            text=offer_text,
            reply_markup=delayed_offer_keyboard(),
            parse_mode='HTML'
        )
        
        await bot.session.close()
        
    except Exception as e:
        logger.error(f"Error sending delayed offer: {e}")


async def safe_db_operation(operation, *args, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º timeout
        return await asyncio.wait_for(operation(*args, **kwargs), timeout=10.0)
    except asyncio.TimeoutError:
        logger.error(f"Database operation timeout: {operation.__name__}")
        return None
    except Exception as e:
        logger.error(f"Database operation error: {e}")
        return None


def get_advice_by_goal(goal: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏"""
    return get_text(f"advice.{goal}")


@user.message(CommandStart())
@rate_limit
@error_handler
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ç–æ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not message.from_user or not message.from_user.id:
        logger.warning("Received start command without user info")
        return
    
    # –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = sanitize_text(message.from_user.username or "", 50)
    first_name = sanitize_text(message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 50)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await safe_db_operation(
        set_user,
        tg_id=message.from_user.id,
        username=username,
        first_name=first_name
    )
    
    if result is False:  # –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        await message.answer(
            "‚ùå <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode='HTML'
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    try:
        await message.answer_photo(
            photo=get_text("coach_photo_url"),  # URL –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ
            caption=get_text("welcome"),
            reply_markup=main_menu(),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error sending photo: {e}")
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            get_text("welcome"),
            reply_markup=main_menu(),
            parse_mode='HTML'
        )


@user.callback_query(F.data == "main_menu")
@rate_limit
@error_handler
async def show_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not callback.from_user or not callback.from_user.id or not callback.message:
        return
        
    await callback.message.edit_text(
        "üéØ <b>Fitness Bot - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(),
        parse_mode='HTML'
    )
    await callback.answer()


@user.callback_query(F.data == "profile")
@rate_limit
@error_handler
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not callback.from_user or not callback.from_user.id or not callback.message:
        return
        
    user_data = await safe_db_operation(get_user, callback.from_user.id)
    
    if not user_data or not user_data.calories:
        await callback.message.edit_text(
            "üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            "‚ùå –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –ö–ë–ñ–£\n"
            "–ù–∞–∂–º–∏ \"–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£\" —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!",
            reply_markup=main_menu(),
            parse_mode='HTML'
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
    try:
        goal_text = get_goal_description(user_data.goal or 'maintenance')
        activity_text = get_activity_description(user_data.activity or 'moderate')
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        calc_date = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        if user_data.calculated_at:
            try:
                calc_date = user_data.calculated_at.strftime('%d.%m.%Y')
            except Exception:
                calc_date = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        profile_text = f"""
üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

üìä <b>–î–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ü–æ–ª: {'üë® –ú—É–∂—Å–∫–æ–π' if user_data.gender == 'male' else 'üë© –ñ–µ–Ω—Å–∫–∏–π'}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_data.age or 0} –ª–µ—Ç
‚Ä¢ –†–æ—Å—Ç: {user_data.height or 0} —Å–º
‚Ä¢ –í–µ—Å: {user_data.weight or 0} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_text}
‚Ä¢ –¶–µ–ª—å: {goal_text}

üî• <b>–¢–≤–æ—è –Ω–æ—Ä–º–∞ –ö–ë–ñ–£:</b>
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {user_data.calories or 0} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –ë–µ–ª–∫–∏: {user_data.proteins or 0} –≥
‚Ä¢ –ñ–∏—Ä—ã: {user_data.fats or 0} –≥  
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {user_data.carbs or 0} –≥

üìÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ: {calc_date}
"""
        
        await callback.message.edit_text(
            profile_text,
            reply_markup=profile_keyboard(),
            parse_mode='HTML'
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error formatting profile: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu(),
            parse_mode='HTML'
        )
        await callback.answer()


@user.callback_query(F.data == "start_kbju")
@rate_limit
@error_handler
async def start_kbju_flow(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£"""
    if not callback.from_user or not callback.from_user.id or not callback.message:
        return
        
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
    try:
        TimerService.cancel_timer(callback.from_user.id)
    except Exception as e:
        logger.error(f"Error canceling timer: {e}")
    
    await callback.message.edit_text(
        "üë§ <b>–†–∞—Å—á–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ö–ë–ñ–£</b>\n\n"
        "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π –ø–æ–ª:",
        reply_markup=gender_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()


@user.callback_query(F.data.startswith("gender_"))
@rate_limit
@error_handler
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    if not callback.from_user or not callback.from_user.id or not callback.message or not callback.data:
        return
        
    try:
        gender = callback.data.split("_")[1]  # male/female
        if gender not in ['male', 'female']:
            logger.warning(f"Invalid gender: {gender}")
            return
            
        await state.update_data(gender=gender)
        
        gender_text = "–º—É–∂—Å–∫–æ–π" if gender == "male" else "–∂–µ–Ω—Å–∫–∏–π"
        
        await callback.message.edit_text(
            f"üë§ –ü–æ–ª: <b>{gender_text}</b>\n\n"
            "üéÇ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n"
            "<i>–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25)</i>",
            parse_mode='HTML'
        )
        await state.set_state(KBJUStates.waiting_age)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error processing gender: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@user.message(KBJUStates.waiting_age)
@rate_limit
@error_handler
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    if not message.from_user or not message.from_user.id or not message.text:
        return
        
    # –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –≤–≤–æ–¥
    age_text = sanitize_text(message.text.strip(), 10)
    
    try:
        age = int(age_text)
        if 15 <= age <= 80:
            await state.update_data(age=age)
            
            await message.answer(
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: <b>{age} –ª–µ—Ç</b>\n\n"
                "‚öñÔ∏è –ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å –≤ –∫–≥?\n"
                "<i>–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70 –∏–ª–∏ 65.5)</i>",
                parse_mode='HTML'
            )
            await state.set_state(KBJUStates.waiting_weight)
        else:
            await message.answer(
                "‚ùå <b>–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 15 –¥–æ 80 –ª–µ—Ç</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                parse_mode='HTML'
            )
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå <b>–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>25</code>",
            parse_mode='HTML'
        )


@user.message(KBJUStates.waiting_weight)
@rate_limit
@error_handler
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    if not message.from_user or not message.from_user.id or not message.text:
        return
        
    # –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –≤–≤–æ–¥
    weight_text = sanitize_text(message.text.strip(), 10)
    
    try:
        weight = float(weight_text.replace(',', '.'))
        if 30 <= weight <= 200:
            await state.update_data(weight=weight)
            
            await message.answer(
                f"‚öñÔ∏è –í–µ—Å: <b>{weight} –∫–≥</b>\n\n"
                "üìè –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–º?\n"
                "<i>–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175)</i>",
                parse_mode='HTML'
            )
            await state.set_state(KBJUStates.waiting_height)
        else:
            await message.answer(
                "‚ùå <b>–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 200 –∫–≥</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                parse_mode='HTML'
            )
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå <b>–í–≤–µ–¥–∏ –≤–µ—Å —á–∏—Å–ª–æ–º</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>70</code> –∏–ª–∏ <code>65.5</code>",
            parse_mode='HTML'
        )


@user.message(KBJUStates.waiting_height)
@rate_limit
@error_handler
async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    if not message.from_user or not message.from_user.id or not message.text:
        return
        
    # –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –≤–≤–æ–¥
    height_text = sanitize_text(message.text.strip(), 10)
    
    try:
        height = int(height_text)
        if 140 <= height <= 220:
            await state.update_data(height=height)
            
            await message.answer(
                f"üìè –†–æ—Å—Ç: <b>{height} —Å–º</b>\n\n"
                "üèÉ‚Äç‚ôÇÔ∏è <b>–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?</b>",
                reply_markup=activity_keyboard(),
                parse_mode='HTML'
            )
        else:
            await message.answer(
                "‚ùå <b>–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 140 –¥–æ 220 —Å–º</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                parse_mode='HTML'
            )
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå <b>–í–≤–µ–¥–∏ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>175</code>",
            parse_mode='HTML'
        )


@user.callback_query(F.data.startswith("activity_"))
@rate_limit
@error_handler
async def process_activity(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    if not callback.from_user or not callback.from_user.id or not callback.message or not callback.data:
        return
        
    try:
        activity = callback.data.split("_", 1)[1]  # low/moderate/high/very_high
        await state.update_data(activity=activity)
        
        activity_text = get_activity_description(activity)
        
        await callback.message.edit_text(
            f"üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{activity_text}</b>\n\n"
            "üéØ <b>–ö–∞–∫–∞—è —É —Ç–µ–±—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?</b>",
            reply_markup=goal_keyboard(),
            parse_mode='HTML'
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error processing activity: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")


@user.callback_query(F.data.startswith("goal_"))
@rate_limit
@error_handler
async def process_goal(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø - —Ä–∞—Å—á–µ—Ç –∏ –ø–æ–∫–∞–∑ –ö–ë–ñ–£"""
    if not callback.from_user or not callback.from_user.id or not callback.message or not callback.data:
        return
        
    try:
        goal = callback.data.split("_", 1)[1]  # weight_loss/maintenance/weight_gain
        data = await state.get_data()
        data['goal'] = goal
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£
        kbju = KBJUCalculator.calculate_kbju(
            gender=data['gender'],
            age=data['age'], 
            weight=data['weight'],
            height=data['height'],
            activity=data['activity'],
            goal=data['goal']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await update_user_data(
            tg_id=callback.from_user.id,
            **data,
            **kbju,
            funnel_status='calculated',
            calculated_at=datetime.utcnow(),
            priority_score=0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 60 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ calculated –ª–∏–¥–∞
        await TimerService.start_calculated_timer(callback.from_user.id, delay_minutes=60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        goal_text = get_goal_description(goal)
        
        result_text = f"""
üéâ <b>–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞ –ö–ë–ñ–£ –¥–ª—è {goal_text.lower()}:</b>

üî• <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {kbju['calories']} –∫–∫–∞–ª/–¥–µ–Ω—å
ü•© <b>–ë–µ–ª–∫–∏:</b> {kbju['proteins']} –≥
ü•ë <b>–ñ–∏—Ä—ã:</b> {kbju['fats']} –≥  
üçû <b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {kbju['carbs']} –≥
"""
        
        await callback.message.edit_text(
            result_text,
            parse_mode='HTML'
        )
        await callback.answer()
        await state.clear()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–µ—Ä–∂–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
        asyncio.create_task(send_delayed_offer(callback.from_user.id, callback.message.chat.id))
        
    except Exception as e:
        logger.error(f"Error in process_goal: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ö–ë–ñ–£</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start",
            reply_markup=back_to_menu(),
            parse_mode='HTML'
        )
        await callback.answer()
        await state.clear()


@user.callback_query(F.data == "delayed_yes")
@rate_limit
@error_handler
async def process_delayed_yes(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if not callback.from_user or not callback.from_user.id or not callback.message:
        return
        
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏–ª –≤–æ—Ä–æ–Ω–∫—É
    TimerService.cancel_timer(callback.from_user.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    priorities_text = get_text("hot_lead_priorities")
    
    await callback.message.edit_text(
        priorities_text,
        reply_markup=priority_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()


@user.callback_query(F.data == "delayed_no")
@rate_limit
@error_handler
async def process_delayed_no(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - —Å–æ–≤–µ—Ç—ã"""
    if not callback.from_user or not callback.from_user.id or not callback.message:
        return
        
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ö–æ–ª–æ–¥–Ω—ã–π –ª–∏–¥
    await update_user_status(
        tg_id=callback.from_user.id,
        status='coldlead_delayed',
        priority_score=10  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ö–æ–ª–æ–¥–Ω—ã—Ö –ª–∏–¥–æ–≤
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ webhook
    user_data = await get_user(callback.from_user.id)
    if user_data:
        user_dict = _user_to_dict(user_data)
        await WebhookService.send_cold_lead(user_dict)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    advice_text = get_advice_by_goal(user_data.goal if user_data else 'maintenance')
    
    tips_text = f"""
üí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ç–≤–æ–µ–π —Ü–µ–ª–∏:</b>

{advice_text}

üì≤ <b>–ë–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:</b>
{CHANNEL_URL or '@fitness_channel'}

üîÑ –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–µ—Ä—å—ë–∑–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º - –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!
"""
    
    await callback.message.edit_text(
        tips_text,
        reply_markup=back_to_menu(),
        parse_mode='HTML'
    )
    await callback.answer()


@user.callback_query(F.data == "send_lead")
@rate_limit
@error_handler
async def process_lead_request(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not callback.from_user or not callback.from_user.id or not callback.message:
        return
        
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –≥–æ—Ä—è—á–∏–π –ª–∏–¥ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    await update_user_status(
        tg_id=callback.from_user.id,
        status='hotlead_consultation',
        priority_score=100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ webhook
    user_data = await get_user(callback.from_user.id)
    if user_data:
        user_dict = _user_to_dict(user_data)
        await WebhookService.send_hot_lead(user_dict, 'consultation_request')
    
    success_text = """
‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>

üë§ –¢–≤–æ–π ID: {user_id}
üí¨ –¢–≤–æ–π username: @{username}

‚ú® –Ø —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!

üí™ –ì–æ—Ç–æ–≤—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ—Ä—ã–≤—É –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏!
""".format(
        user_id=callback.from_user.id,
        username=callback.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'
    )
    
    await callback.message.edit_text(
        success_text,
        reply_markup=back_to_menu(),
        parse_mode='HTML'
    )
    await callback.answer()


@user.callback_query(F.data.startswith("priority_"))
@rate_limit
@error_handler
async def process_priority(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –ø–æ–∫–∞–∑ –æ—Ñ—Ñ–µ—Ä–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    if not callback.from_user or not callback.from_user.id or not callback.message or not callback.data:
        return
        
    priority = callback.data.split("_")[1]  # nutrition/training/schedule
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ hotlead —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    await update_user_status(
        tg_id=callback.from_user.id,
        status='hotlead_delayed',
        priority=priority,
        priority_score=80  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ webhook
    user_data = await get_user(callback.from_user.id)
    if user_data:
        user_dict = _user_to_dict(user_data)
        await WebhookService.send_hot_lead(user_dict, priority)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ—Ñ–µ—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    consultation_text = get_text("consultation_offer")
    
    await callback.message.edit_text(
        consultation_text,
        reply_markup=consultation_contact_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()


@user.callback_query(F.data == "funnel_cold") 
@rate_limit
@error_handler
async def process_cold_lead(callback: CallbackQuery):
    """–•–æ–ª–æ–¥–Ω—ã–π –ª–∏–¥ - —Ö–æ—á–µ—Ç —Å–æ–≤–µ—Ç—ã"""
    if not callback.from_user or not callback.from_user.id or not callback.message:
        return
        
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏–ª –≤–æ—Ä–æ–Ω–∫—É
    TimerService.cancel_timer(callback.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ coldlead
    await update_user_status(
        tg_id=callback.from_user.id,
        status='coldlead',
        priority_score=5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ö–æ–ª–æ–¥–Ω—ã—Ö –ª–∏–¥–æ–≤
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n
    user_data = await get_user(callback.from_user.id)
    if user_data:
        user_dict = _user_to_dict(user_data)
        await WebhookService.send_cold_lead(user_dict)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    advice_text = get_advice_by_goal(user_data.goal if user_data else 'maintenance')
    
    await callback.message.edit_text(
        f"üí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ç–≤–æ–µ–π —Ü–µ–ª–∏:</b>\n\n{advice_text}\n\n"
        f"üì¢ <b>–ë–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:</b>\n{CHANNEL_URL or '@fitness_channel'}\n\n"
        "üîÑ –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–µ—Ä—å–µ–∑–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º - –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –ø–æ–º–æ–∂–µ–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω!",
        reply_markup=back_to_menu(),
        parse_mode='HTML'
    )


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def _user_to_dict(user) -> dict:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç User –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è webhook"""
    if not user:
        return {}
        
    return {
        'tg_id': user.tg_id or 0,
        'username': user.username or '',
        'first_name': user.first_name or '',
        'gender': user.gender or '',
        'age': user.age or 0,
        'weight': user.weight or 0.0,
        'height': user.height or 0,
        'activity': user.activity or '',
        'goal': user.goal or '',
        'calories': user.calories or 0,
        'proteins': user.proteins or 0,
        'fats': user.fats or 0,
        'carbs': user.carbs or 0
    }
